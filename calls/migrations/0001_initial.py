# Generated by Django 5.2.5 on 2025-08-22 01:28

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('campaigns', '0001_initial'),
        ('leads', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CallTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('call_type', models.CharField(choices=[('outbound', 'Outbound'), ('inbound', 'Inbound'), ('callback', 'Callback'), ('transfer', 'Transfer'), ('conference', 'Conference')], default='outbound', max_length=20)),
                ('state', models.CharField(choices=[('pending', 'Pending'), ('queued', 'Queued'), ('dialing', 'Dialing'), ('ringing', 'Ringing'), ('answered', 'Answered'), ('connected', 'Connected'), ('on_hold', 'On Hold'), ('transferring', 'Transferring'), ('conferenced', 'Conferenced'), ('completed', 'Completed'), ('failed', 'Failed'), ('abandoned', 'Abandoned'), ('no_answer', 'No Answer'), ('busy', 'Busy'), ('invalid', 'Invalid Number')], db_index=True, default='pending', max_length=20)),
                ('phone_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('caller_id', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('pbx_call_id', models.CharField(blank=True, db_index=True, help_text='PBX system call identifier', max_length=100)),
                ('channel_name', models.CharField(blank=True, max_length=100)),
                ('pbx_server', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('queued_at', models.DateTimeField(blank=True, null=True)),
                ('dialing_started_at', models.DateTimeField(blank=True, null=True)),
                ('answered_at', models.DateTimeField(blank=True, null=True)),
                ('connected_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('dial_delay', models.DurationField(blank=True, help_text='Time from queue to dial', null=True)),
                ('ring_duration', models.DurationField(blank=True, null=True)),
                ('call_duration', models.DurationField(blank=True, null=True)),
                ('talk_time', models.DurationField(blank=True, null=True)),
                ('hangup_reason', models.CharField(blank=True, max_length=100)),
                ('hangup_by', models.CharField(blank=True, choices=[('agent', 'Agent'), ('customer', 'Customer'), ('system', 'System')], max_length=20)),
                ('amd_result', models.CharField(blank=True, choices=[('human', 'Human'), ('machine', 'Machine'), ('unknown', 'Unknown')], max_length=20)),
                ('amd_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('priority', models.IntegerField(db_index=True, default=5, help_text='Priority for queue processing')),
                ('retry_count', models.IntegerField(default=0)),
                ('max_retries', models.IntegerField(default=3)),
                ('next_retry_at', models.DateTimeField(blank=True, null=True)),
                ('last_error', models.TextField(blank=True)),
                ('error_count', models.IntegerField(default=0)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='call_tasks', to=settings.AUTH_USER_MODEL)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='call_tasks', to='campaigns.campaign')),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='call_tasks', to='leads.lead')),
            ],
            options={
                'db_table': 'call_tasks',
                'ordering': ['priority', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='CallDetailRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdr_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('pbx_call_id', models.CharField(db_index=True, max_length=100)),
                ('unique_id', models.CharField(blank=True, help_text='PBX unique call identifier', max_length=100)),
                ('linked_id', models.CharField(blank=True, help_text='Linked call for transfers', max_length=100)),
                ('caller_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('called_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('caller_id_name', models.CharField(blank=True, max_length=100)),
                ('call_date', models.DateField(db_index=True)),
                ('call_time', models.TimeField()),
                ('answer_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(db_index=True)),
                ('total_duration', models.DurationField(help_text='Total call duration from dial to hangup')),
                ('billable_duration', models.DurationField(help_text='Billable duration (answered time)')),
                ('ring_duration', models.DurationField(blank=True, null=True)),
                ('talk_duration', models.DurationField(blank=True, null=True)),
                ('hold_duration', models.DurationField(blank=True, null=True)),
                ('wrap_duration', models.DurationField(blank=True, null=True)),
                ('call_result', models.CharField(db_index=True, max_length=50)),
                ('hangup_cause', models.CharField(blank=True, max_length=100)),
                ('hangup_party', models.CharField(blank=True, choices=[('caller', 'Caller'), ('called', 'Called'), ('system', 'System')], max_length=20)),
                ('amd_result', models.CharField(blank=True, max_length=20)),
                ('amd_duration', models.DurationField(blank=True, null=True)),
                ('call_quality_score', models.IntegerField(blank=True, help_text='Call quality score 1-10', null=True)),
                ('audio_quality_problems', models.TextField(blank=True)),
                ('caller_location', models.CharField(blank=True, max_length=100)),
                ('called_location', models.CharField(blank=True, max_length=100)),
                ('timezone_offset', models.CharField(blank=True, max_length=10)),
                ('cost_per_minute', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('billing_increment', models.IntegerField(default=6, help_text='Billing increment in seconds')),
                ('channel_name', models.CharField(blank=True, max_length=100)),
                ('destination_channel', models.CharField(blank=True, max_length=100)),
                ('source_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=200)),
                ('recording_consent', models.BooleanField(blank=True, null=True)),
                ('recording_url', models.URLField(blank=True)),
                ('server_name', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('archive_date', models.DateField(blank=True, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='campaigns.campaign')),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='leads.lead')),
                ('call_task', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cdr', to='calls.calltask')),
            ],
            options={
                'db_table': 'call_detail_records',
                'ordering': ['-call_date', '-call_time'],
            },
        ),
        migrations.CreateModel(
            name='DNCList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('list_name', models.CharField(max_length=100, unique=True)),
                ('list_type', models.CharField(choices=[('internal', 'Internal DNC'), ('federal', 'Federal DNC'), ('state', 'State DNC'), ('custom', 'Custom DNC')], default='internal', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('source_file', models.CharField(blank=True, max_length=200)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('update_frequency', models.CharField(blank=True, help_text="e.g., 'monthly', 'weekly'", max_length=50)),
                ('total_numbers', models.IntegerField(default=0)),
                ('active_numbers', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('applies_to_campaigns', models.ManyToManyField(blank=True, to='campaigns.campaign')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dnc_lists',
                'ordering': ['list_name'],
            },
        ),
        migrations.CreateModel(
            name='DNCNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(db_index=True, max_length=17, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('added_date', models.DateField(auto_now_add=True, db_index=True)),
                ('source', models.CharField(blank=True, help_text='Source of DNC request', max_length=100)),
                ('reason', models.CharField(blank=True, max_length=200)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('verified', models.BooleanField(default=False)),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('dnc_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='numbers', to='calls.dnclist')),
            ],
            options={
                'db_table': 'dnc_numbers',
            },
        ),
        migrations.CreateModel(
            name='Recording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recording_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('recording_type', models.CharField(choices=[('full', 'Full Call'), ('agent_only', 'Agent Side Only'), ('customer_only', 'Customer Side Only'), ('conference', 'Conference'), ('whisper', 'Whisper/Monitor')], default='full', max_length=20)),
                ('filename', models.CharField(db_index=True, max_length=200)),
                ('file_format', models.CharField(default='wav', max_length=10)),
                ('file_size', models.BigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('duration', models.DurationField(help_text='Recording duration')),
                ('storage_type', models.CharField(choices=[('local', 'Local Storage'), ('s3', 'Amazon S3'), ('azure', 'Azure Blob'), ('gcs', 'Google Cloud Storage'), ('ftp', 'FTP Server')], default='local', max_length=20)),
                ('storage_path', models.CharField(help_text='Full path to recording file', max_length=500)),
                ('storage_url', models.URLField(blank=True, help_text='URL for accessing recording')),
                ('bucket_name', models.CharField(blank=True, help_text='Cloud storage bucket', max_length=100)),
                ('audio_quality', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], max_length=20)),
                ('sample_rate', models.IntegerField(blank=True, help_text='Audio sample rate in Hz', null=True)),
                ('bit_rate', models.IntegerField(blank=True, help_text='Audio bit rate in kbps', null=True)),
                ('requires_consent', models.BooleanField(default=True)),
                ('consent_obtained', models.BooleanField(default=False)),
                ('retention_policy', models.CharField(default='7_years', max_length=50)),
                ('delete_after', models.DateField(blank=True, null=True)),
                ('access_count', models.IntegerField(default=0)),
                ('last_accessed_at', models.DateTimeField(blank=True, null=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('is_transcribed', models.BooleanField(default=False)),
                ('transcription_text', models.TextField(blank=True)),
                ('processing_error', models.TextField(blank=True)),
                ('recorded_at', models.DateTimeField(db_index=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('call_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='calls.calltask')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='campaigns.campaign')),
                ('cdr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='calls.calldetailrecord')),
                ('last_accessed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accessed_recordings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recordings',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='ComplianceAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('audit_type', models.CharField(choices=[('call_attempt', 'Call Attempt'), ('dnc_check', 'DNC Check'), ('consent_verification', 'Consent Verification'), ('recording_access', 'Recording Access'), ('data_export', 'Data Export'), ('campaign_change', 'Campaign Change'), ('agent_action', 'Agent Action'), ('system_event', 'System Event')], db_index=True, max_length=30)),
                ('event_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=10)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=500)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('before_data', models.JSONField(blank=True, help_text='Data state before change', null=True)),
                ('after_data', models.JSONField(blank=True, help_text='Data state after change', null=True)),
                ('additional_data', models.JSONField(blank=True, help_text='Additional event data', null=True)),
                ('requires_review', models.BooleanField(default=False)),
                ('reviewed', models.BooleanField(default=False)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('event_timestamp', models.DateTimeField(db_index=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('call_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='calls.calltask')),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='campaigns.campaign')),
                ('lead', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='leads.lead')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_audit_logs', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('recording', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='calls.recording')),
            ],
            options={
                'db_table': 'compliance_audit_logs',
                'ordering': ['-event_timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='calltask',
            index=models.Index(fields=['state', 'priority'], name='call_tasks_state_8b9a46_idx'),
        ),
        migrations.AddIndex(
            model_name='calltask',
            index=models.Index(fields=['campaign', 'state'], name='call_tasks_campaig_c5955d_idx'),
        ),
        migrations.AddIndex(
            model_name='calltask',
            index=models.Index(fields=['agent', 'state'], name='call_tasks_agent_i_e8e86e_idx'),
        ),
        migrations.AddIndex(
            model_name='calltask',
            index=models.Index(fields=['pbx_call_id'], name='call_tasks_pbx_cal_4fdbb9_idx'),
        ),
        migrations.AddIndex(
            model_name='calltask',
            index=models.Index(fields=['created_at'], name='call_tasks_created_6306a5_idx'),
        ),
        migrations.AddIndex(
            model_name='calldetailrecord',
            index=models.Index(fields=['call_date'], name='call_detail_call_da_fa19e9_idx'),
        ),
        migrations.AddIndex(
            model_name='calldetailrecord',
            index=models.Index(fields=['campaign', 'call_date'], name='call_detail_campaig_109895_idx'),
        ),
        migrations.AddIndex(
            model_name='calldetailrecord',
            index=models.Index(fields=['agent', 'call_date'], name='call_detail_agent_i_8f7f85_idx'),
        ),
        migrations.AddIndex(
            model_name='calldetailrecord',
            index=models.Index(fields=['pbx_call_id'], name='call_detail_pbx_cal_c8fca2_idx'),
        ),
        migrations.AddIndex(
            model_name='calldetailrecord',
            index=models.Index(fields=['caller_number'], name='call_detail_caller__873dd4_idx'),
        ),
        migrations.AddIndex(
            model_name='calldetailrecord',
            index=models.Index(fields=['called_number'], name='call_detail_called__3d7255_idx'),
        ),
        migrations.AddIndex(
            model_name='calldetailrecord',
            index=models.Index(fields=['call_result'], name='call_detail_call_re_302fe4_idx'),
        ),
        migrations.AddIndex(
            model_name='dncnumber',
            index=models.Index(fields=['phone_number'], name='dnc_numbers_phone_n_059700_idx'),
        ),
        migrations.AddIndex(
            model_name='dncnumber',
            index=models.Index(fields=['added_date'], name='dnc_numbers_added_d_00403d_idx'),
        ),
        migrations.AddIndex(
            model_name='dncnumber',
            index=models.Index(fields=['is_active'], name='dnc_numbers_is_acti_ad8881_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dncnumber',
            unique_together={('dnc_list', 'phone_number')},
        ),
        migrations.AddIndex(
            model_name='recording',
            index=models.Index(fields=['campaign', 'recorded_at'], name='recordings_campaig_c4f240_idx'),
        ),
        migrations.AddIndex(
            model_name='recording',
            index=models.Index(fields=['agent', 'recorded_at'], name='recordings_agent_i_18e22b_idx'),
        ),
        migrations.AddIndex(
            model_name='recording',
            index=models.Index(fields=['filename'], name='recordings_filenam_e5723d_idx'),
        ),
        migrations.AddIndex(
            model_name='recording',
            index=models.Index(fields=['delete_after'], name='recordings_delete__ef1718_idx'),
        ),
        migrations.AddIndex(
            model_name='complianceauditlog',
            index=models.Index(fields=['audit_type', 'event_timestamp'], name='compliance__audit_t_dd6361_idx'),
        ),
        migrations.AddIndex(
            model_name='complianceauditlog',
            index=models.Index(fields=['campaign', 'event_timestamp'], name='compliance__campaig_43505d_idx'),
        ),
        migrations.AddIndex(
            model_name='complianceauditlog',
            index=models.Index(fields=['user', 'event_timestamp'], name='compliance__user_id_5b06cd_idx'),
        ),
        migrations.AddIndex(
            model_name='complianceauditlog',
            index=models.Index(fields=['severity'], name='compliance__severit_49e928_idx'),
        ),
        migrations.AddIndex(
            model_name='complianceauditlog',
            index=models.Index(fields=['requires_review'], name='compliance__require_de8bfe_idx'),
        ),
    ]
