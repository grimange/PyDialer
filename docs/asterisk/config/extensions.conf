[general]
static=yes
writeprotect=no
clearglobalvars=no

[globals]
; PyDialer API configuration
PYDIALER_API_URL=http://host.docker.internal:8000/api/v1
PYDIALER_WEBHOOK_SECRET=your-webhook-secret-here

; PyDialer Stasis Application Context
; All calls entering the PyDialer system go through this context
[pydialer-stasis]
exten => _X.,1,NoOp(PyDialer Stasis Entry: ${EXTEN} from ${CALLERID(num)})
same => n,Set(CHANNEL(hangup_handler_push)=hangup-handler,s,1)
same => n,Stasis(pydialer,${EXTEN},${CALLERID(num)})
same => n,Hangup()

; Inbound call handling
; Routes incoming calls to PyDialer for agent assignment
[pydialer-inbound]
exten => _X.,1,NoOp(Inbound call: ${EXTEN} from ${CALLERID(num)})
same => n,Set(__CALL_DIRECTION=inbound)
same => n,Set(__DIALED_NUMBER=${EXTEN})
same => n,Set(__CALLER_NUMBER=${CALLERID(num)})
same => n,Set(CHANNEL(hangup_handler_push)=hangup-handler,s,1)
same => n,Stasis(pydialer,inbound,${EXTEN},${CALLERID(num)})
same => n,Hangup()

; Outbound call handling
; Used by PyDialer predictive dialer for outbound campaigns
[pydialer-outbound]
exten => _X.,1,NoOp(Outbound call: ${EXTEN})
same => n,Set(__CALL_DIRECTION=outbound)
same => n,Set(__DIALED_NUMBER=${EXTEN})
same => n,Set(CHANNEL(hangup_handler_push)=hangup-handler,s,1)
same => n,Stasis(pydialer,outbound,${EXTEN})
same => n,Hangup()

; External Media context for AI processing
; Used by the AI Media Gateway for real-time transcription
[pydialer-external-media]
exten => ai_media,1,NoOp(External Media for AI processing: ${UNIQUEID})
same => n,Set(__CALL_DIRECTION=ai_media)
same => n,Answer()
same => n,ExternalMedia()
same => n,Hangup()

; Agent context for call transfers and internal routing
[pydialer-agents]
exten => _1XXX,1,NoOp(Agent extension: ${EXTEN})
same => n,Stasis(pydialer,agent,${EXTEN},${CALLERID(num)})
same => n,Hangup()

; Conference rooms for call monitoring and training
[pydialer-conference]
exten => _8XXX,1,NoOp(Conference room: ${EXTEN})
same => n,Stasis(pydialer,conference,${EXTEN})
same => n,Hangup()

; Hangup handler for call cleanup and CDR processing
[hangup-handler]
exten => s,1,NoOp(Call cleanup handler for ${CHANNEL})
same => n,Set(HANGUP_TIME=${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)})
same => n,System(curl -X POST ${PYDIALER_API_URL}/telephony/call-ended/ \
  -H "Content-Type: application/json" \
  -H "X-Webhook-Secret: ${PYDIALER_WEBHOOK_SECRET}" \
  -d '{"channel": "${CHANNEL}", "uniqueid": "${UNIQUEID}", "hangup_time": "${HANGUP_TIME}", "call_direction": "${CALL_DIRECTION}"}' \
  2>/dev/null &)
same => n,Return()

; Demo context for testing basic functionality
[demo]
; Test extension 100 - Simple playback
exten => 100,1,Answer()
same => n,Wait(1)
same => n,Playback(hello-world)
same => n,Wait(2)
same => n,Hangup()

; Test extension 200 - PyDialer Stasis test
exten => 200,1,Answer()
same => n,Wait(1)
same => n,Playbook(welcome)
same => n,Stasis(pydialer,demo,${CALLERID(num)})
same => n,Hangup()

; Test extension 300 - Echo test
exten => 300,1,Answer()
same => n,Wait(1)
same => n,Playback(demo-echotest)
same => n,Echo()
same => n,Hangup()

; Test extension 400 - Conference test
exten => 400,1,Answer()
same => n,Wait(1)
same => n,Playback(conf-onlyone)
same => n,ConfBridge(demo_conference)
same => n,Hangup()

; Invalid extension handler
exten => i,1,NoOp(Invalid extension dialed)
same => n,Playback(pbx-invalid)
same => n,Hangup()

; Timeout handler
exten => t,1,NoOp(Timeout in context)
same => n,Playback(vm-goodbye)
same => n,Hangup()

; Emergency services (modify as per local requirements)
[emergency]
exten => 911,1,NoOp(Emergency call)
same => n,Set(__CALL_DIRECTION=emergency)
same => n,Dial(PJSIP/911@trunk_provider,30)
same => n,Hangup()

exten => 112,1,NoOp(Emergency call - European)
same => n,Set(__CALL_DIRECTION=emergency)
same => n,Dial(PJSIP/112@trunk_provider,30)
same => n,Hangup()

; Include emergency context in other contexts for safety
[pydialer-inbound]
include => emergency

[pydialer-outbound] 
include => emergency

[demo]
include => emergency
